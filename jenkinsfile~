pipeline {
    agent any

    parameters {
        string(name: 'REPO_URL', defaultValue: 'https://github.com/saber0amine/PY-SpoceOveD.git', description: 'Git repository URL')
        string(name: 'BRANCH', defaultValue: 'master', description: 'Git branch to build')
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                git branch: params.BRANCH, url: params.REPO_URL
            }
        }

        stage('Setup Python Environment') {
            steps {
                sh '''
                apt-get update
                apt-get install -y python3.11-venv
                python3 -m venv venv
                . venv/bin/activate
                pip install -r requirements.txt
                '''
            }
        }
stage('Run SAST Scanner') {
    agent {
        docker {
            image 'sonarsource/sonar-scanner-cli:latest'
        }
    }
    steps {
        withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
            sh '''
            sonar-scanner \
            -Dsonar.projectKey=project-ama \
            -Dsonar.organization=amasoft \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=$SONAR_TOKEN
            '''
        }
    }
}

        stage('Run SCA Analysis using Snyk') {
            agent {
                docker {
                    image 'snyk_image:latest'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker'
                }
            }
            steps {
                withCredentials([string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')]) {
                    sh '''
		    ls 
                    snyk auth $SNYK_TOKEN
                    DEBUG=*snyk* snyk monitor --file=requirements.txt 
                    '''
                }
            }
        }
        
        stage('Deploy') {
            steps {
                echo 'Deploying the application'
                // Add your deployment steps here
            }
        }
    }

    post {
        always {
            sh 'deactivate || true'
            cleanWs()
        }
        failure {
            sh '''
            echo "All Docker containers:"
            docker ps -a
            echo "Recent Docker container logs:"
            CONTAINER_ID=$(docker ps -aq | head -n 1)
            if [ -n "$CONTAINER_ID" ]; then
                docker logs $CONTAINER_ID
            else
                echo "No containers found"
            fi
            '''
        }
    }
}

